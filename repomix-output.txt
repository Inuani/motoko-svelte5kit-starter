This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-29T09:47:04.565Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.devcontainer/
  devcontainer.json
  Dockerfile
.github/
  workflows/
    tests.yml
backend/
  tests/
    main.greet.test.mo
  main.mo
src/
  lib/
    index.ts
  routes/
    +layout.svelte
    +layout.ts
    +page.svelte
  app.d.ts
  app.html
  global.scss
static/
  react.svg
  svelte.svg
  vite.svg
tests/
  canister.test.ts
  setup.ts
.eslintignore
.eslintrc.cjs
.gitignore
.gitpod.yml
.npmrc
.prettierignore
.prettierrc
dfx.json
mops.toml
package.json
README.md
svelte.config.js
tsconfig.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: .devcontainer/devcontainer.json
================
{
	"name": "Vite Motoko SvelteKit Internet Identity Starter",
	"build": { "dockerfile": "Dockerfile" },
	"forwardPorts": [4943, 3000],
	"portsAttributes": {
		"4943": {
			"label": "dfx",
			"onAutoForward": "ignore"
		},
		"3000": {
			"label": "dev server",
			"onAutoForward": "openBrowser"
		}
	},
	"postAttachCommand": "dfx stop && dfx start --clean --background && npm install && npm run start",
	"customizations": {
		"vscode": {
			"extensions": ["dfinity-foundation.vscode-motoko"]
		}
	}
}

================
File: .devcontainer/Dockerfile
================
FROM ghcr.io/dfinity/icp-dev-env:10

# Install mops
RUN curl -fsSL cli.mops.one/install.sh | sh
RUN mops toolchain init

================
File: .github/workflows/tests.yml
================
name: tests

on:
  workflow_dispatch:
  pull_request:
    types: [synchronize, opened, reopened, ready_for_review, unlabeled]

jobs:
  test:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dfx
        uses: dfinity/setup-dfx@main

      - name: Install mops
        uses: ZenVoich/setup-mops@v1

      - name: generate declarations
        run: dfx generate backend

      - name: install dependencies
        run: npm i

      - name: run tests
        run: npm run test

================
File: backend/tests/main.greet.test.mo
================
import { Main } "../main";

let main = await Main({ phrase = "Hello" });

assert (await main.greet("Moritz")) == "Hello, Moritz!";

================
File: backend/main.mo
================
actor class Main(initArgs : { phrase : Text }) {
	public query func greet(name : Text) : async Text {
		return initArgs.phrase # ", " # name # "!";
	};

	public query ({ caller }) func whoAmI() : async Principal {
		return caller;
	};
};

================
File: src/lib/index.ts
================
// place files you want to import through the `$lib` alias in this folder.

================
File: src/routes/+layout.svelte
================
<script>
	import '../global.scss';
</script>

<slot />

================
File: src/routes/+layout.ts
================
// as we can don't have access to SSR on the IC, we need to prerender
// every route of the app (https://kit.svelte.dev/docs/page-options#prerender)
export const prerender = true;

================
File: src/routes/+page.svelte
================
<script lang="ts">
	import { HttpAgent } from '@dfinity/agent';
	import { createActor, canisterId, backend } from '../declarations/backend';
	import { AuthClient } from '@dfinity/auth-client';
	import { onMount } from 'svelte';

	let input = '';
	let disabled = false;
	let greeting = '';
	let principal = '';
	let state: 'loading' | 'authenticated' | 'unauthenticated' = 'loading';

	// we use the default unauthenticated actor
	// until the user signs in
	let actor = backend;

	onMount(async () => {
		let authClient = await AuthClient.create();
		state = (await authClient.isAuthenticated()) ? 'authenticated' : 'unauthenticated';
		if (state === 'authenticated') {
			const identity = authClient.getIdentity();
			const agent = new HttpAgent({ identity });
			actor = createActor(canisterId, {
				agent
			});
		}
	});

	const handleGreet = async () => {
		disabled = true;

		try {
			// Call the IC
			greeting = await actor.greet(input);
		} catch (err: unknown) {
			console.error(err);
		}

		disabled = false;
	};

	const handleWhoAmI = async () => {
		disabled = true;

		try {
			// Call the IC
			principal = (await actor.whoAmI()).toString();
		} catch (err: unknown) {
			console.error(err);
		}

		disabled = false;
	};

	const signIn = async () => {
		try {
			// create an auth client
			let authClient = await AuthClient.create();

			// start the login process and wait for it to finish
			await new Promise<void>((resolve, reject) => {
				authClient.login({
					identityProvider:
						process.env.DFX_NETWORK === 'ic'
							? 'https://identity.ic0.app'
							: `http://rdmx6-jaaaa-aaaaa-aaadq-cai.localhost:4943`,
					onSuccess: resolve,
					onError: reject,
					windowOpenerFeatures: `toolbar=0,location=0,menubar=0,width=400,height=600,left=${window.screen.width / 2 - 200},top=${window.screen.height / 2 - 300}`
				});
			});

			state = 'authenticated';

			// At this point we're authenticated, and we can get the identity from the auth client:
			const identity = authClient.getIdentity();
			// Using the identity obtained from the auth client, we can create an agent to interact with the IC.
			const agent = new HttpAgent({ identity });
			// Using the interface description of our webapp, we create an actor that we use to call the service methods.
			actor = createActor(canisterId, {
				agent
			});
		} catch (err: unknown) {
			console.error(err);
		}
	};

	const signOut = async () => {
		try {
			// create an auth client
			let authClient = await AuthClient.create();

			// start the logout process and wait for it to finish
			await authClient.logout();

			state = 'unauthenticated';

			actor = backend;
		} catch (err: unknown) {
			console.error(err);
		}
	};
</script>

<svelte:head>
	<title>Vite + SvelteKit + Motoko</title>
</svelte:head>

<main class="App">
	{#if state === 'loading'}
		<div class="spinner ii-button"></div>
	{:else if state === 'authenticated'}
		<button class="ii-button" on:click={signOut}>Sign out</button>
	{:else}
		<button class="ii-button" on:click={signIn}>Sign in with Internet Identity</button>
	{/if}
	<div>
		<a href="https://vitejs.dev" target="_blank">
			<img src="vite.svg" class="logo vite" alt="Vite logo" />
		</a>
		<a href="https://kit.svelte.dev/" target="_blank">
			<img src="svelte.svg" class="logo svelte" alt="Svelte logo" />
		</a>
		<a
			href="https://internetcomputer.org/docs/current/developer-docs/build/cdks/motoko-dfinity/motoko/"
			target="_blank"
		>
			<span class="logo-stack">
				<img src="motoko_shadow.png" class="logo motoko-shadow" alt="Motoko logo" />
				<img src="motoko_moving.png" class="logo motoko" alt="Motoko logo" />
			</span>
		</a>
	</div>
	<h1>Vite + SvelteKit + Motoko</h1>

	<form on:submit|preventDefault={handleGreet}>
		<label for="name">Enter your name: &nbsp;</label>
		<input id="name" alt="Name" type="text" bind:value={input} {disabled} />
		<button type="submit" {disabled}>Click Me!</button>
	</form>

	<section class="display-content">
		{greeting}
	</section>

	<form on:submit|preventDefault={handleWhoAmI}>
		<button type="submit" {disabled}>Who Am I?</button>
	</form>

	<section class="display-content">
		{principal}
	</section>
</main>

<style lang="scss">
	.App {
		max-width: 1280px;
		margin: 0 auto;
		padding: 2rem;
		text-align: center;
	}

	.ii-button {
		position: absolute;
		top: 0;
		right: 0;
	}
	.logo {
		height: 6em;
		padding: 1.5em;
		will-change: filter;
	}
	.logo:hover {
		filter: drop-shadow(0 0 2em #646cffaa);
	}
	.logo.svelte:hover {
		filter: drop-shadow(0 0 2em #61dafbaa);
	}

	@keyframes logo-spin {
		from {
			transform: rotate(0deg);
		}
		to {
			transform: rotate(360deg);
		}
	}
	@media (prefers-reduced-motion: no-preference) {
		.logo.svelte {
			animation: logo-spin infinite 60s linear;
		}
		.logo.vite {
			animation: logo-spin infinite 60s linear reverse;
		}
	}

	.logo.motoko:hover {
		filter: drop-shadow(0 0 2em #61dafbaa);
	}

	.logo-stack {
		display: inline-grid;
	}

	.logo-stack > * {
		grid-column: 1;
		grid-row: 1;
	}

	@keyframes logo-swim {
		from {
			transform: rotate(4deg) translateY(0);
		}
		50% {
			transform: rotate(-5deg) translateY(0);
		}
		to {
			transform: rotate(4deg) translateY(0);
		}
	}

	@media (prefers-reduced-motion: no-preference) {
		.logo.motoko {
			animation: logo-swim 5s ease-in-out infinite;
		}
	}

	form {
		display: flex;
		justify-content: center;
		gap: 0.5em;
		flex-flow: row wrap;
		max-width: 40vw;
		margin: auto;
		align-items: baseline;
		font-family: sans-serif;
		font-size: 1.5rem;
	}

	button[type='submit'] {
		padding: 5px 20px;
		margin: 10px auto;
		float: right;
	}

	.display-content {
		margin: 10px auto;
		padding: 10px 60px;
		border: 1px solid #888;
		background-color: #888;
		border-radius: 8px;
	}

	.display-content:empty {
		display: none;
	}

	.spinner {
		border: 4px solid rgba(0, 0, 0, 0.1);
		border-top: 4px solid #000;
		border-radius: 50%;
		width: 40px;
		height: 40px;
		animation: spin 2s linear infinite;
	}

	@keyframes spin {
		0% {
			transform: rotate(0deg);
		}
		100% {
			transform: rotate(360deg);
		}
	}
</style>

================
File: src/app.d.ts
================
// See https://kit.svelte.dev/docs/types#app
// for information about these interfaces
declare global {
	namespace App {
		// interface Error {}
		// interface Locals {}
		// interface PageData {}
		// interface PageState {}
		// interface Platform {}
	}
}

export {};

================
File: src/app.html
================
<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%sveltekit.assets%/favicon.ico" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div style="display: contents">%sveltekit.body%</div>
	</body>
</html>

================
File: src/global.scss
================
:root {
	font-family: Inter, Avenir, Helvetica, Arial, sans-serif;
	font-size: 16px;
	line-height: 24px;
	font-weight: 400;

	color-scheme: light dark;
	color: rgba(255, 255, 255, 0.87);
	background-color: #242424;

	font-synthesis: none;
	text-rendering: optimizeLegibility;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	-webkit-text-size-adjust: 100%;
}

a {
	font-weight: 500;
	color: #646cff;
	text-decoration: inherit;

	&:hover {
		color: #535bf2;
	}
}

body {
	margin: 0;
	display: flex;
	place-items: center;
	min-width: 320px;
	min-height: 100vh;
}

h1 {
	font-size: 3.2em;
	line-height: 1.1;
}

button {
	border-radius: 8px;
	border: 1px solid transparent;
	padding: 0.6em 1.2em;
	font-size: 1em;
	font-weight: 500;
	font-family: inherit;
	background-color: #1a1a1a;
	cursor: pointer;
	transition:
		border-color 0.25s,
		opacity 1s;

	&:hover {
		border-color: #646cff;
	}

	&:focus,
	&:focus-visible {
		outline: 4px auto -webkit-focus-ring-color;
	}
}

@media (prefers-color-scheme: light) {
	:root {
		color: #213547;
		background-color: #ffffff;
	}
	a:hover {
		color: #747bff;
	}
	button {
		background-color: #f9f9f9;
	}
}

================
File: static/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: static/svelte.svg
================
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 23.0.2, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 98.1 118" style="enable-background:new 0 0 98.1 118;" xml:space="preserve">
<style type="text/css">
	.st0{fill:#FF3E00;}
	.st1{fill:#FFFFFF;}
</style>
<path class="st0" d="M91.8,15.6C80.9-0.1,59.2-4.7,43.6,5.2L16.1,22.8C8.6,27.5,3.4,35.2,1.9,43.9c-1.3,7.3-0.2,14.8,3.3,21.3
	c-2.4,3.6-4,7.6-4.7,11.8c-1.6,8.9,0.5,18.1,5.7,25.4c11,15.7,32.6,20.3,48.2,10.4l27.5-17.5c7.5-4.7,12.7-12.4,14.2-21.1
	c1.3-7.3,0.2-14.8-3.3-21.3c2.4-3.6,4-7.6,4.7-11.8C99.2,32.1,97.1,22.9,91.8,15.6"/>
<path class="st1" d="M40.9,103.9c-8.9,2.3-18.2-1.2-23.4-8.7c-3.2-4.4-4.4-9.9-3.5-15.3c0.2-0.9,0.4-1.7,0.6-2.6l0.5-1.6l1.4,1
	c3.3,2.4,6.9,4.2,10.8,5.4l1,0.3l-0.1,1c-0.1,1.4,0.3,2.9,1.1,4.1c1.6,2.3,4.4,3.4,7.1,2.7c0.6-0.2,1.2-0.4,1.7-0.7L65.5,72
	c1.4-0.9,2.3-2.2,2.6-3.8c0.3-1.6-0.1-3.3-1-4.6c-1.6-2.3-4.4-3.3-7.1-2.6c-0.6,0.2-1.2,0.4-1.7,0.7l-10.5,6.7
	c-1.7,1.1-3.6,1.9-5.6,2.4c-8.9,2.3-18.2-1.2-23.4-8.7c-3.1-4.4-4.4-9.9-3.4-15.3c0.9-5.2,4.1-9.9,8.6-12.7l27.5-17.5
	c1.7-1.1,3.6-1.9,5.6-2.5c8.9-2.3,18.2,1.2,23.4,8.7c3.2,4.4,4.4,9.9,3.5,15.3c-0.2,0.9-0.4,1.7-0.7,2.6l-0.5,1.6l-1.4-1
	c-3.3-2.4-6.9-4.2-10.8-5.4l-1-0.3l0.1-1c0.1-1.4-0.3-2.9-1.1-4.1c-1.6-2.3-4.4-3.3-7.1-2.6c-0.6,0.2-1.2,0.4-1.7,0.7L32.4,46.1
	c-1.4,0.9-2.3,2.2-2.6,3.8s0.1,3.3,1,4.6c1.6,2.3,4.4,3.3,7.1,2.6c0.6-0.2,1.2-0.4,1.7-0.7l10.5-6.7c1.7-1.1,3.6-1.9,5.6-2.5
	c8.9-2.3,18.2,1.2,23.4,8.7c3.2,4.4,4.4,9.9,3.5,15.3c-0.9,5.2-4.1,9.9-8.6,12.7l-27.5,17.5C44.8,102.5,42.9,103.3,40.9,103.9"/>
</svg>

================
File: static/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: tests/canister.test.ts
================
import { describe, it, expect, afterEach, beforeEach, afterAll } from 'vitest';

import { AnonymousIdentity } from '@dfinity/agent';
import { PocketIc, PocketIcServer, createIdentity, type Actor } from '@hadronous/pic';
import type { _SERVICE } from '../src/declarations/backend/backend.did';
import { deployCanister } from './setup';

describe('canister tests', () => {
	let pic: PocketIc;
	let picServer: PocketIcServer;
	let actor: Actor<_SERVICE>;

	const alice = createIdentity('superSecretAlicePassword');
	const bob = createIdentity('superSecretBobPassword');

	afterEach(async () => {
		await pic.tearDown();
	});

	afterAll(async () => {
		await picServer.stop();
	});

	describe('when calling greet on the canister deployed with the default init args', () => {
		beforeEach(async () => {
			({ pic, picServer, actor } = await deployCanister({
				deployer: alice.getPrincipal()
			}));
		});

		it('the argument should be prefixed with `Hello, `', async () => {
			await expect(actor.greet('Moritz')).resolves.toEqual('Hello, Moritz!');
		});

		it('the argument should be prefixed with `Hello, `, even for very long names', async () => {
			const veryLongName = 'a'.repeat(1000);
			await expect(actor.greet(veryLongName)).resolves.toEqual('Hello, ' + veryLongName + '!');
		});

		it('a call to whoami with the anonymous principal should return the anonymous principal', async () => {
			actor.setIdentity(new AnonymousIdentity());
			await expect(actor.whoAmI()).resolves.toEqual(new AnonymousIdentity().getPrincipal());
		});

		it('a call to whoami with the alice principal should return the alice principal', async () => {
			actor.setIdentity(alice);
			await expect(actor.whoAmI()).resolves.toEqual(alice.getPrincipal());
		});

		it('a call to whoami with the bob principal should return the bob principal', async () => {
			actor.setIdentity(bob);
			await expect(actor.whoAmI()).resolves.toEqual(bob.getPrincipal());
		});
	});

	describe('when calling greet on the canister deployed with `bonjour` as an init arg', () => {
		beforeEach(async () => {
			({ pic, actor } = await deployCanister({
				initArgs: { phrase: 'bonjour' },
				deployer: alice.getPrincipal()
			}));
		});

		it('the argument should be prefixed with `bonjour, `', async () => {
			await expect(actor.greet('Moritz')).resolves.toEqual('bonjour, Moritz!');
		});

		it('the argument should be prefixed with `Hello, `, even for very long names', async () => {
			const veryLongName = 'a'.repeat(1000);
			await expect(actor.greet(veryLongName)).resolves.toEqual('bonjour, ' + veryLongName + '!');
		});

		it('a call to whoami with the anonymous principal should return the anonymous principal', async () => {
			actor.setIdentity(new AnonymousIdentity());
			await expect(actor.whoAmI()).resolves.toEqual(new AnonymousIdentity().getPrincipal());
		});

		it('a call to whoami with the alice principal should return the alice principal', async () => {
			actor.setIdentity(alice);
			await expect(actor.whoAmI()).resolves.toEqual(alice.getPrincipal());
		});

		it('a call to whoami with the bob principal should return the bob principal', async () => {
			actor.setIdentity(bob);
			await expect(actor.whoAmI()).resolves.toEqual(bob.getPrincipal());
		});
	});
});

================
File: tests/setup.ts
================
import { IDL } from '@dfinity/candid';
import { idlFactory, init } from '../src/declarations/backend/backend.did.js';
import type { _SERVICE } from '../src/declarations/backend/backend.did';
import { resolve } from 'node:path';
import { PocketIc, PocketIcServer } from '@hadronous/pic';
import { Principal } from '@dfinity/principal';

type InitArgs = {
	phrase: string;
};
const defaultInitArgs: InitArgs = {
	phrase: 'Hello'
};
const WASM_PATH = resolve(__dirname, '..', '.dfx', 'local', 'canisters', 'backend', 'backend.wasm');

interface DeployOptions {
	initArgs?: InitArgs;
	deployer?: Principal;
}

export async function deployCanister({
	initArgs = defaultInitArgs,
	deployer = Principal.anonymous()
}: DeployOptions) {
	const encodedInitArgs = IDL.encode(init({ IDL }), [initArgs]);
	const picServer = await PocketIcServer.start();
	const pic = await PocketIc.create(picServer.getUrl());
	const fixture = await pic.setupCanister<_SERVICE>({
		idlFactory,
		wasm: WASM_PATH,
		arg: encodedInitArgs,
		sender: deployer
	});
	const actor = fixture.actor;
	const canisterId = fixture.canisterId;
	return { pic, picServer, actor, canisterId };
}

================
File: .eslintignore
================
/src/declarations
.DS_Store
node_modules
/build
/.svelte-kit
/package
.env
.env.*
!.env.example

# Ignore files for PNPM, NPM and YARN
pnpm-lock.yaml
package-lock.json
yarn.lock

================
File: .eslintrc.cjs
================
/** @type { import("eslint").Linter.Config } */
module.exports = {
	root: true,
	extends: [
		'eslint:recommended',
		'plugin:@typescript-eslint/recommended',
		'plugin:svelte/recommended',
		'prettier'
	],
	parser: '@typescript-eslint/parser',
	plugins: ['@typescript-eslint'],
	parserOptions: {
		sourceType: 'module',
		ecmaVersion: 2022,
		extraFileExtensions: ['.svelte']
	},
	env: {
		browser: true,
		es2017: true,
		node: true
	},
	overrides: [
		{
			files: ['*.svelte'],
			parser: 'svelte-eslint-parser',
			parserOptions: {
				parser: '@typescript-eslint/parser'
			}
		}
	]
};

================
File: .gitignore
================
.DS_Store
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
!.vscode/settings.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Canisters
/src/declarations
.dfx
.vessel
.mops
deps

# Environment variables
/build
/.svelte-kit
/package
.env
.env.local
.env.development
.env.test
.env.production
.env.*
!.env.example
vite.config.js.timestamp-*
vite.config.ts.timestamp-*

================
File: .gitpod.yml
================
# Online IDE configuration (safe to delete)

tasks:
  - before: |
      export MO_DEV_HIDE_URLS=1 # hide Candid UI links
      export PATH="$HOME/bin:$PATH"
      echo 'export PATH="$HOME/bin:$PATH"' >> ~/.bashrc
      sudo apt-get install -q -y libunwind-dev
      sh -ci "$(curl -fsSL https://internetcomputer.org/install.sh)"
      dfx start --background --clean
      npm i -g ic-mops@latest
      mops toolchain init
      source ~/.bashrc
      npm run setup
    init: |
      npm start
    command: |
      npm start

vscode:
  extensions:
    - dfinity-foundation.vscode-motoko
    - svelte.svelte-vscode

ports:
  - name: Replica
    port: 4943
    visibility: public
    onOpen: ignore
  - name: Dev Server
    port: 3000
    visibility: public
    onOpen: open-browser

================
File: .npmrc
================
engine-strict=true

================
File: .prettierignore
================
/src/declarations
# Ignore files for PNPM, NPM and YARN
pnpm-lock.yaml
package-lock.json
yarn.lock

================
File: .prettierrc
================
{
	"useTabs": true,
	"singleQuote": true,
	"trailingComma": "none",
	"printWidth": 100,
	"plugins": ["prettier-plugin-svelte", "prettier-plugin-motoko"],
	"overrides": [{ "files": "*.svelte", "options": { "parser": "svelte" } }]
}

================
File: dfx.json
================
{
	"canisters": {
		"backend": {
			"type": "motoko",
			"main": "backend/main.mo",
			"init_arg": "(record { phrase = \"moin\"})"
		},
		"frontend": {
			"dependencies": ["backend"],
			"type": "assets",
			"source": ["build/"]
		},
		"internet_identity": {
			"type": "custom",
			"candid": "https://github.com/dfinity/internet-identity/releases/download/release-2024-09-17/internet_identity.did",
			"wasm": "https://github.com/dfinity/internet-identity/releases/download/release-2024-09-17/internet_identity_dev.wasm.gz",
			"remote": {
				"id": {
					"ic": "rdmx6-jaaaa-aaaaa-aaadq-cai"
				}
			},
			"specified_id": "rdmx6-jaaaa-aaaaa-aaadq-cai"
		}
	},
	"defaults": {
		"build": {
			"packtool": "npm run --silent sources"
		}
	},
	"output_env_file": ".env",
	"version": 2
}

================
File: mops.toml
================
[dependencies]
base = "0.13.0"

[toolchain]
moc = "0.13.0"

================
File: package.json
================
{
	"name": "vite-sveltekit-motoko",
	"version": "0.0.1",
	"private": true,
	"scripts": {
		"start": "run-p backend frontend",
		"frontend": "vite --host",
		"backend": "mo-dev --generate --deploy -y",
		"build": "vite build",
		"prebuild": "dfx generate",
		"pretest": "dfx generate backend",
		"test": "run-s test:e2e test:unit",
		"test:e2e": "vitest run",
		"test:unit": "mops test",
		"format": "prettier --write .",
		"sources": "mops sources",
		"preinstall": "mops install",
		"dev": "vite dev",
		"preview": "vite preview",
		"check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
		"check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
		"lint": "prettier --check . && eslint ."
	},
	"devDependencies": {
		"@dfinity/agent": "^1.2.0",
		"@dfinity/auth-client": "^1.2.0",
		"@dfinity/candid": "^1.2.0",
		"@dfinity/principal": "^1.2.0",
		"@hadronous/pic": "0.8.1",
		"@sveltejs/adapter-auto": "^3.0.0",
		"@sveltejs/adapter-static": "^3.0.1",
		"@sveltejs/kit": "^2.0.0",
		"@sveltejs/vite-plugin-svelte": "^3.0.0",
		"@types/eslint": "8.56.0",
		"@typescript-eslint/eslint-plugin": "^6.0.0",
		"@typescript-eslint/parser": "^6.0.0",
		"eslint": "^8.56.0",
		"eslint-config-prettier": "^9.1.0",
		"eslint-plugin-svelte": "^2.35.1",
		"mo-dev": "^0.13.0",
		"npm-run-all": "^4.1.5",
		"prettier": "^3.2.4",
		"prettier-plugin-motoko": "^0.8.2",
		"prettier-plugin-svelte": "^3.1.2",
		"sass": "^1.70.0",
		"svelte": "^4.2.7",
		"svelte-check": "^3.6.0",
		"tslib": "^2.4.1",
		"typescript": "^5.0.0",
		"vite": "^5.0.3",
		"vite-plugin-environment": "^1.1.3",
		"vitest": "^1.2.0"
	},
	"type": "module"
}

================
File: README.md
================
# Vite + SvelteKit + Motoko + PicJS + Internet Identity + Mops

### Get started directly:

> [!WARNING]
> Due to current limitations, this template does not work in a Browser Editor when using gitpod or codespaces. Please use VS Code for desktop instead.
> <img width="633" alt="Screenshot 2024-01-29 at 12 44 57" src="https://github.com/letmejustputthishere/vite-sveltekit-motoko/assets/32162112/2f2c025d-354b-47ca-9303-56bce180f6e7">

[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/letmejustputthishere/vite-sveltekit-motoko)

[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/letmejustputthishere/vite-sveltekit-motoko?quickstart=1)

This template gives you everything you need to build a full-stack Web3 application on the [Internet Computer](https://internetcomputer.org/).

For an example of a real-world dapp built using this starter project, check out the source code for the [ICRC-7 launchpad](https://github.com/letmejustputthishere/icrc7_launchpad).

## 📦 Create a New Project

> Make sure that [Node.js](https://nodejs.org/en/) `>= 20`, [mops](https://docs.mops.one/quick-start) `>=1.0.0` and [`dfx`](https://internetcomputer.org/docs/current/references/dfxvm/) `>= 0.23.0` are installed on your system.

Run the following commands in a new, empty project directory:

```sh
npx degit letmejustputthishere/vite-sveltekit-motoko vite-sveltekit-motoko # Download this starter project
cd vite-sveltekit-motoko # Navigate to the project directory
dfx start --clean --background # Run dfx in the background
npm install # Install packages and deploy canisters

npm start # Start the development server
```

When ready, run `dfx deploy --network ic` to deploy your application to the Internet Computer.

## 🛠️ Technology Stack

- [Vite](https://vitejs.dev/): high-performance tooling for front-end web development
- [SvelteKit](https://kit.svelte.dev/): a component-based UI library
- [TypeScript](https://www.typescriptlang.org/): JavaScript extended with syntax for types
- [Sass](https://sass-lang.com/): an extended syntax for CSS stylesheets
- [Prettier](https://prettier.io/): code formatting for a wide range of supported languages
- [Motoko](https://github.com/dfinity/motoko#readme): a safe and simple programming language for the Internet Computer
- [Mops](https://mops.one): an on-chain community package manager for Motoko
- [mo-dev](https://github.com/dfinity/motoko-dev-server#readme): a live reload development server for Motoko
- [eslint](https://eslint.org/): a static code analysis tool used in software development for identifying problematic patterns or code that doesn't adhere to certain style guidelines in JavaScript and TypeScript
- [Internet Identity](https://github.com/dfinity/internet-identity/tree/main): a decentralized identity provider for the Internet Computer
- [pic.js](https://github.com/hadronous/pic-js): an Internet Computer Protocol canister testing library for TypeScript and JavaScript

## 🧪 Testing

You can run `npm run test` to run unit tests using [`mops test`](https://docs.mops.one/cli/mops-test) and end-to-end tests using [`pic.js`](https://hadronous.github.io/pic-js/).

## 📚 Documentation

- [Vite developer docs](https://vitejs.dev/guide/)
- [SvelteKit quick start guide](https://learn.svelte.dev/tutorial/introducing-sveltekit)
- [Internet Computer docs](https://internetcomputer.org/docs/current/developer-docs/ic-overview)
- [`dfx.json` reference schema](https://internetcomputer.org/docs/current/references/dfx-json-reference/)
- [Motoko developer docs](https://internetcomputer.org/docs/current/developer-docs/build/cdks/motoko-dfinity/motoko/)
- [Mops usage instructions](https://j4mwm-bqaaa-aaaam-qajbq-cai.ic0.app/#/docs/install)
- [Internet Identity docs](https://internetcomputer.org/docs/current/developer-docs/integrations/internet-identity/overview)
- [pic-js](https://hadronous.github.io/pic-js/)

## 💡 Tips and Tricks

- Customize your project's code style by editing the `.prettierrc` file and then running `npm run format`.
- Reduce the latency of update calls by passing the `--emulator` flag to `dfx start`.
- Install a Motoko package by running `mops add <package-name>`. Here is a [list of available packages](https://mops.one/).
- Split your frontend and backend console output by running `npm run frontend` and `npm run backend` in separate terminals.

================
File: svelte.config.js
================
import staticAdapter from '@sveltejs/adapter-static';
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	// Consult https://kit.svelte.dev/docs/integrations#preprocessors
	// for more information about preprocessors
	preprocess: vitePreprocess(),

	kit: {
		// adapter-auto only supports some environments, see https://kit.svelte.dev/docs/adapter-auto for a list.
		// If your environment is not supported or you settled on a specific environment, switch out the adapter.
		// See https://kit.svelte.dev/docs/adapters for more information about adapters.
		adapter: staticAdapter()
	}
};

export default config;

================
File: tsconfig.json
================
{
	"extends": "./.svelte-kit/tsconfig.json",
	"compilerOptions": {
		"allowJs": true,
		"checkJs": true,
		"esModuleInterop": true,
		"forceConsistentCasingInFileNames": true,
		"resolveJsonModule": true,
		"skipLibCheck": true,
		"sourceMap": true,
		"strict": true,
		"moduleResolution": "bundler"
	}
	// Path aliases are handled by https://kit.svelte.dev/docs/configuration#alias
	//
	// If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
	// from the referenced tsconfig.json - TypeScript does not merge them in
}

================
File: vite.config.ts
================
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vitest/config';
import environment from 'vite-plugin-environment';

export default defineConfig({
	plugins: [
		sveltekit(),
		// this is needed to surface the environment variables to your app
		// https://vitejs.dev/guide/env-and-mode
		// https://www.npmjs.com/package/vite-plugin-environment
		environment('all', { prefix: 'CANISTER_' }),
		environment('all', { prefix: 'DFX_' })
	],
	build: {
		target: 'es2022'
	},
	optimizeDeps: {
		// he global object varies between environments (like window in browsers, global in Node.js), leading to compatibility issues.
		// By defining global as globalThis, developers unify access to the global scope, as globalThis is a standard and
		// environment-agnostic way to refer to the global object/
		esbuildOptions: {
			define: {
				global: 'globalThis'
			}
		}
	},
	server: {
		port: 3000,
		// this is needed to redirect api calls to the local replica locally
		proxy: {
			'/api': {
				target: 'http://127.0.0.1:4943',
				changeOrigin: true
			}
		}
	},
	test: {
		include: ['tests/**/*.{test,spec}.{js,ts}']
	}
});
